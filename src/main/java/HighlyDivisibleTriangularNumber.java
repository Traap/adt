/**
 * Project Euler Problem #12
 * Highly Divisible Triangular Number
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 *  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *  Let us list the factors of the first seven triangle numbers:
 *   1: 1
 *   3: 1,3
 *   6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */

import java.util.ArrayList;


public class HighlyDivisibleTriangularNumber {
	private static int TARGET = 500;
	private static int START_AT = 1;
	private static ArrayList<Long> FACTORS = new ArrayList<Long>();

	public static void main(String[] args) {
		Stopwatch.start();
		boolean searching = true;
		long i=0, n=0, m=0;

		for (i=START_AT; searching; ++i) {
			n = Sum(i);
			m = DivisorCount(n);
			searching = IsTargetReached(m);
		}
		LogResults(i, n, m);
		System.out.println(
        String.format("%,dns to reach %,d.",
          Stopwatch.elapsedTime(), TARGET));
	}

	public static long Sum(long n) {
		long nbr = 0;
		for (long i = 0; i < n; i++){
			nbr += i;
		}
		return nbr;
	}

	public static long DivisorCount(long n) {
		if (n==0) return 0;		// Zero has 0 factors.
		ResetFactors(n);		  // Add n to list of factors.
		if (n==1)  {
			return 1l;
		}

		long count=2l, upperLimit=n/2l;
		for (long i = 2; i < upperLimit; i++) {
			if (0 == n % i) {
				count += 2;
				upperLimit = n / i;
				FACTORS.add(i);
				FACTORS.add(upperLimit);
			}
		}
		return count;
	}

	private static void ResetFactors(long n){
		// Every natural number > 1 has at minimum 2 factors, 1 and itself.
		FACTORS.clear();
		FACTORS.add(1l);		// Add n to list of factors.
		FACTORS.add(n);	  	// Add n to list of factors.
	}

	private static boolean IsTargetReached(long m) {
		return m < TARGET;
	}

	private static void LogResults(long i, long n, long m) {
		System.out.print(String.format("i=%,d, n=%,d m=%,d, \nfactors:", i, n, m));
		for (int j = 0; j < FACTORS.size(); j++) {
		    if (0 == j%2) {
                System.out.print(String.format("\n{%,d*", FACTORS.get(j)));
		    }
		    else {
                System.out.print(String.format("%,d}", FACTORS.get(j)));

		    }
		}
		System.out.print("\n");
	}
}
