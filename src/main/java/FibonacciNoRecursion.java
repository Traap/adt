/** 
 * Project Euler Problem #2
 * Even Fibonacci Numbers
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms.  * By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, * find the sum of the even-valued terms.
 */
public class FibonacciNoRecursion {

	public static void main(final String[] args) {

		Stopwatch.start();

		final FibonacciNoRecursion f = new FibonacciNoRecursion();
		f.fibonacciSequence(FibonacciNoRecursion.MAX_VALUE);

		Stopwatch.stop();

		System.out.println(String.format(
				"%,dns to reach %,dth Fibonacci. Value is %,d",
				Stopwatch.elapsedTime(), FibonacciNoRecursion.MAX_VALUE,
				f.right_));
	}

	private void fibonacciSequence(final long max) {
		long sum = 0;
		
		for (long ii = 0; ii <= FibonacciNoRecursion.MAX_VALUE; ii++) {
			if (ii <= 1) {
				right_ = ii;
				left_ = ii - 1;
			} else {
				right_ = right_ + left_; // new hi.
				left_ = right_ - left_; // new lo
			}
			
			// Sum even numbers in Fibonacci sequence when number < 4M.
			if (left_ <= 4000000) {
				if (0 == (left_ % 2)) {
					sum += left_;
					System.out.println(String.format("sum=%,d left=%,d", sum, left_));
				}
			}
		}
		System.out.println(String.format("sum= %,d", sum));
	}

	// class and instance variables.
	public static final long MAX_VALUE = 91; // NOTE: 92 causes long roll over
												// :)
	private long left_ = 0;
	private long right_ = 1;
}
